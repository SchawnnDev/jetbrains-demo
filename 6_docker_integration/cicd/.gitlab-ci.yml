stages:
  - test
  - lint
  - build
  - docker
  - deploy

variables:
  GO_VERSION: "1.24"
  DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DOCKER_TAG_LATEST: $CI_REGISTRY_IMAGE:latest

# Cache modules between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .go/pkg/mod/

before_script:
  - mkdir -p .go
  - export GOPATH=$CI_PROJECT_DIR/.go
  - export PATH=$GOPATH/bin:$PATH

# Test stage
test:
  stage: test
  image: golang:${GO_VERSION}
  script:
    - go mod download
    - go test -v ./... -coverprofile=coverage.txt
    - go tool cover -func=coverage.txt
  artifacts:
    paths:
      - coverage.txt
    expire_in: 1 week

# Lint stage
lint:
  stage: lint
  image: golangci/golangci-lint:latest
  script:
    - golangci-lint run ./...

# Build stage
build:
  stage: build
  image: golang:${GO_VERSION}
  script:
    - go build -v -o app ./6_docker_integration/app.go
  artifacts:
    paths:
      - app
    expire_in: 1 week

# Docker build and push stage
docker:
  stage: docker
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE -t $DOCKER_TAG_LATEST -f 6_docker_integration/Dockerfile .
    - docker push $DOCKER_IMAGE
    - docker push $DOCKER_TAG_LATEST
  only:
    - main
    - develop

# Deploy stage
deploy-production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $SERVER_USER@$SERVER_HOST "cd /app/deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: production
  only:
    - main

# Deploy to staging environment
deploy-staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $STAGING_USER@$STAGING_HOST "cd /app/deployment && docker-compose pull && docker-compose up -d"
  environment:
    name: staging
  only:
    - develop
